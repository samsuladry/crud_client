{"ast":null,"code":"var _jsxFileName = \"E:\\\\laragon\\\\www\\\\Work\\\\Reactjs\\\\crud_app\\\\client\\\\src\\\\Component\\\\Todo\\\\TodoList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Badge, VStack, Text, HStack, IconButton, StackDivider, Spacer, Input } from '@chakra-ui/react';\nimport { FaTrash } from \"react-icons/fa\";\nimport { AddTodo } from './AddTodo';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_ALL_TODOS } from '../../Graphql/Queries';\nimport { DELETE_TODOS } from '../../Graphql/Mutation'; // import PropTypes from 'prop-types';\n// import { useQuery, useMutation } from \"@apollo/client\" // use this to query from db\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodoList = () => {\n  _s();\n\n  const {\n    data\n  } = useQuery(GET_ALL_TODOS);\n  const [todos, setTodos] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [deleteTodos, delTodo] = useMutation(DELETE_TODOS);\n  const delData = delTodo.data;\n  useEffect(() => {\n    if (data) {\n      setTodos(data.getAllTodos);\n    }\n  }, [data]);\n\n  const deleteTodo = async id => {\n    // console.log(id)\n    let parseId = parseInt(id);\n    await deleteTodos({\n      variables: {\n        id: parseId\n      }\n    });\n    window.location.reload(); // console.log(data)\n  }; // const [todos, setTodos] = useState(initialTodos)\n\n\n  if (!todos.length) {\n    return /*#__PURE__*/_jsxDEV(Badge, {\n      colorScheme: \"green\",\n      p: \"5\",\n      m: \"5\",\n      borderRadius: \"lg\",\n      children: \"No Todos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      divider: /*#__PURE__*/_jsxDEV(StackDivider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 18\n      }, this),\n      borderColor: \"gray.300\",\n      borderWidth: \"2px\",\n      p: \"4\",\n      borderRadius: \"lg\",\n      width: \"100%\",\n      maxW: {\n        base: '90vw',\n        sm: '100vw',\n        lg: '150vw',\n        xl: '180vw'\n      },\n      alignItems: \"stretch\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        placeholder: \"Search...\",\n        onChange: e => {\n          setSearchTerm(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), todos.filter(val => {\n        if (searchTerm == \"\") {\n          return val;\n        } else if (val.body.toLowerCase().includes(searchTerm.toLocaleLowerCase())) {\n          return val;\n        }\n      }).map(todo => {\n        return /*#__PURE__*/_jsxDEV(HStack, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: todo.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"Delete\",\n            icon: /*#__PURE__*/_jsxDEV(FaTrash, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 32\n            }, this),\n            isRound: true,\n            onClick: () => {\n              deleteTodo(todo.id);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)]\n        }, todo.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(AddTodo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TodoList, \"U0aG8RZ0f9Vjvu/bSxUgZwtDWw8=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["E:/laragon/www/Work/Reactjs/crud_app/client/src/Component/Todo/TodoList.tsx"],"names":["React","useState","useEffect","Badge","VStack","Text","HStack","IconButton","StackDivider","Spacer","Input","FaTrash","AddTodo","useQuery","useMutation","GET_ALL_TODOS","DELETE_TODOS","TodoList","data","todos","setTodos","searchTerm","setSearchTerm","deleteTodos","delTodo","delData","getAllTodos","deleteTodo","id","parseId","parseInt","variables","window","location","reload","length","base","sm","lg","xl","e","target","value","filter","val","body","toLowerCase","includes","toLocaleLowerCase","map","todo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Badge, VStack, Text, HStack, IconButton, StackDivider, Spacer, Input } from '@chakra-ui/react'\r\nimport { FaTrash } from \"react-icons/fa\";\r\nimport { AddTodo } from './AddTodo'\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { GET_ALL_TODOS } from '../../Graphql/Queries';\r\nimport { DELETE_TODOS } from '../../Graphql/Mutation';\r\n// import PropTypes from 'prop-types';\r\n\r\n// import { useQuery, useMutation } from \"@apollo/client\" // use this to query from db\r\n\r\nexport const TodoList = () => {\r\n    const { data } = useQuery(GET_ALL_TODOS)\r\n    const [todos, setTodos] = useState([])\r\n    const [searchTerm, setSearchTerm] = useState(\"\")\r\n\r\n    const [deleteTodos, delTodo] = useMutation(DELETE_TODOS)\r\n    const delData = delTodo.data\r\n\r\n    useEffect(() => {\r\n        if(data)\r\n        {\r\n            setTodos(data.getAllTodos)\r\n        }\r\n        \r\n    }, [data])\r\n    \r\n    const deleteTodo =async (id: any) =>\r\n    {\r\n        // console.log(id)\r\n        let parseId = parseInt(id)\r\n        await deleteTodos({\r\n            variables:\r\n            {\r\n                id: parseId\r\n            }\r\n        })\r\n        window.location.reload()\r\n        // console.log(data)\r\n    }\r\n\r\n    // const [todos, setTodos] = useState(initialTodos)\r\n\r\n    if(!todos.length)\r\n    {\r\n        return(\r\n            <Badge colorScheme=\"green\" p='5' m='5' borderRadius='lg'>\r\n                No Todos\r\n            </Badge>\r\n        )\r\n    }\r\n    \r\n    return( \r\n    <div>\r\n        <VStack\r\n        divider={<StackDivider />}\r\n        borderColor='gray.300'\r\n        borderWidth='2px'\r\n        p='4'\r\n        borderRadius='lg'\r\n        width=\"100%\"\r\n        maxW={{ base: '90vw', sm: '100vw', lg: '150vw', xl: '180vw' }}\r\n        alignItems='stretch'\r\n        >\r\n            <Input type=\"text\" placeholder=\"Search...\" onChange = {(e) => { setSearchTerm(e.target.value) }}/>\r\n            <Spacer/>\r\n            {todos.filter((val: any) =>\r\n            {\r\n                if(searchTerm == \"\")\r\n                {\r\n                    return val\r\n                }\r\n                else if(val.body.toLowerCase().includes(searchTerm.toLocaleLowerCase()))\r\n                {\r\n                    return val\r\n                } \r\n            }).map((todo: any) =>\r\n            {\r\n                return (\r\n                    <HStack key={todo.id}>\r\n                        <Text>{todo.body}</Text>\r\n                        <Spacer/>\r\n                        <IconButton \r\n                        aria-label=\"Delete\" \r\n                        icon={ <FaTrash/>}\r\n                        isRound={true}\r\n                        onClick = {() => {  deleteTodo(todo.id) }}/>\r\n                    </HStack>\r\n                )\r\n            })} \r\n            <AddTodo/>\r\n        </VStack>\r\n    </div>\r\n    );\r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}